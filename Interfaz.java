package validarsintaxis;


import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;import java_cup.runtime.Symbol;
import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;
import org.fife.ui.rsyntaxtextarea.SyntaxConstants;
import org.fife.ui.rtextarea.RTextScrollPane;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author maast
 */
public class Interfaz extends javax.swing.JFrame {
RSyntaxTextArea txtEntrada = new RSyntaxTextArea();
RTextScrollPane sp = new RTextScrollPane(txtEntrada);
    /**
     * Creates new form Interfaz
     */
    public Interfaz() {
        
        initComponents();
       rsyntax();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        directorio = new javax.swing.JTextField();
        expresion = new javax.swing.JTextField();
        archivo = new javax.swing.JButton();
        guardar = new javax.swing.JButton();
        validar = new javax.swing.JButton();
        analizar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        imprimirdoc = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        salida = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtSintaxis = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        expresion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expresionActionPerformed(evt);
            }
        });

        archivo.setText("Archivo");
        archivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                archivoActionPerformed(evt);
            }
        });

        guardar.setText("Guardar");
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });

        validar.setText("Validar Expresion");
        validar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validarActionPerformed(evt);
            }
        });

        analizar.setText("Analizar");
        analizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(expresion)
                    .addComponent(directorio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(analizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(archivo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(guardar))
                    .addComponent(validar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(35, 35, 35))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(directorio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(archivo)
                    .addComponent(guardar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(expresion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(validar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(analizar)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        imprimirdoc.setColumns(20);
        imprimirdoc.setRows(5);
        jScrollPane1.setViewportView(imprimirdoc);

        salida.setColumns(20);
        salida.setRows(5);
        jScrollPane2.setViewportView(salida);

        txtSintaxis.setColumns(20);
        txtSintaxis.setRows(5);
        jScrollPane3.setViewportView(txtSintaxis);

        jPanel3.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 479, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void expresionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expresionActionPerformed
        // TODO add your handling code here:
 
        
        
    }//GEN-LAST:event_expresionActionPerformed

    private void archivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_archivoActionPerformed
        // TODO add your handling code here:
JFileChooser fc= new JFileChooser();
fc.showOpenDialog(null);
File archivo=fc.getSelectedFile();
String completo="";

try{
FileReader fr= new FileReader(archivo);
BufferedReader br= new BufferedReader(fr);
String texto="";
String linea;
    while((linea=br.readLine())!=null){
    texto=texto+linea+"\n";
    }
    
completo=texto;    
imprimirdoc.setText(completo);

   
}
catch(Exception e){
    
    }        


        
    }//GEN-LAST:event_archivoActionPerformed

    private void analizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analizarActionPerformed
 
        // TODO add your handling code here:
 /*       
 File archivo = new File("archivo.txt");
        PrintWriter escribir;
        try {
            escribir = new PrintWriter(archivo);
            escribir.print(imprimirdoc.getText());
            escribir.close();
        } catch (FileNotFoundException ex) {
        //    Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
//        try {
        Reader lector;
        try {
            lector = new BufferedReader(new FileReader("archivo.txt"));
            Lexer lexer = new Lexer(lector);
            String resultado = "";
            while (true) {
                Tokens tokens = lexer.yylex();
                if (tokens == null) {
                    resultado += "FIN";
                    salida.setText(resultado);
                    return;
                }
                switch (tokens) {
                    case ERROR:
                        resultado += "Símbolo no definido\n";
                        break;
                    case Identificador: case Numero: case Reservadas:
                        resultado += lexer.lexeme + ": Es un " + tokens + "\n";
                        break;
                    default:
                        resultado += "Token: " + tokens + "\n";
                        break;
                }
            }
        } catch (FileNotFoundException ex) {
//            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IOException ex) {
//            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    */


 
 //lexer y cup
 
 File archivo = new File("archivo.txt");
PrintWriter escribir;
try {
escribir = new PrintWriter(archivo);
escribir.print(imprimirdoc.getText());
escribir.close();
} catch (FileNotFoundException ex) {
java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
}
Reader lector;
try {
// Crear clase con las reglas ...
analizarLexico();
analizarSintaxis();
} catch (FileNotFoundException ex) {
java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
} catch (IOException ex) {
java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
}


 txtEntrada.setText(imprimirdoc.getText());       
        
        
    }//GEN-LAST:event_analizarActionPerformed

    private void validarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validarActionPerformed
        // TODO add your handling code here:
   validarSintaxis validar= new validarSintaxis();
        String texto=imprimirdoc.getText();
        String expresionR=expresion.getText();
        validar.validar(texto,expresionR);
        
      salida.setText( validar.validar(texto,expresionR));              
        
        
    }//GEN-LAST:event_validarActionPerformed

    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_guardarActionPerformed
public void rsyntax(){


// 1. Añadir estilo de lenguaje Java
txtEntrada.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JAVA);
// 2. Quilar la línea amarilla de la posición del cursor
txtEntrada.setHighlightCurrentLine(false);
// 3. Inicializar txtEntrada con un mensaje de bienvenida
txtEntrada.setText("");

jPanel3.add(sp);
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws Exception {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
  //   String rutaPaquete="C:/Users/maast/Documents/NetBeansProjects/AnalizadorLexico/src/validarsintaxis/Lexer.flex";
    /*     String ruta="C:/Users/maast/Documents/NetBeansProjects/AnalizadorLexico/src/validarsintaxis/Lexer.flex";
        generarLexer(ruta);  */
       

    
    
        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }
    
/*    public static void generarLexer(String ruta){
        File archivo =new File(ruta);
        JFlex.Main.generate(archivo);
      
        }  */
    
//metodo 2    
 private void analizarSintaxis() throws IOException{
String ST = imprimirdoc.getText();
Sintax s = new Sintax(new validarsintaxis.LexerCup(new StringReader(ST)));
try {
s.parse();
txtSintaxis.setText("Análisis realizado correctamente");
//txtSintaxis.setForeground(new Color(25, 111, 61));
} catch (Exception ex) {
Symbol sym = s.getS();
txtSintaxis.setText("Error de sintaxis. Línea: " + (sym.right + 1) + " Columna: " + (sym.left + 1) + ", Texto:"+
"\"" + sym.value + "\"");
//txtAnalizarSin.setForeground(Color.red);
}
}   
 
 
 
//metodo 1 analizar lexico
private void analizarLexico() throws IOException{
int cont = 1;
String expr = (String) imprimirdoc.getText();
Lexer lexer = new Lexer(new StringReader(expr));
String resultado = "LINEA " + cont + "\t\tSIMBOLO\n";
while (true) {
Tokens token = lexer.yylex();
if (token == null) {
salida.setText(resultado);
return;
}
switch (token) {
case Linea:
cont++;
resultado += "LINEA " + cont + "\n";
break;
case Comillas:
resultado += " <Comillas>\t\t" + lexer.lexeme + "\n";
break;
case Cadena:
resultado += " <Tipo de dato>\t" + lexer.lexeme + "\n";
break;
case T_dato:
resultado += " <Tipo de dato>\t" + lexer.lexeme + "\n";
break;
case If:
resultado += " <Reservada if>\t" + lexer.lexeme + "\n";
break;
case Else:
resultado += " <Reservada else>\t" + lexer.lexeme + "\n";
break;    
case Do:
resultado += " <Reservada do>\t" + lexer.lexeme + "\n";
break;
case While:
resultado += " <Reservada while>\t" + lexer.lexeme + "\n";
break;
case For:
resultado += " <Reservada while>\t" + lexer.lexeme + "\n";
break;
case Igual:
resultado += " <Operador igual>\t" + lexer.lexeme + "\n";
break;
case Suma:
resultado += " <Operador suma>\t" + lexer.lexeme + "\n";
break;
case Resta:
resultado += " <Operador resta>\t" + lexer.lexeme + "\n";
break;
case Multiplicacion:
resultado += " <Operador multiplicacion>\t" + lexer.lexeme + "\n";
break;
case Division:
resultado += " <Operador division>\t" + lexer.lexeme + "\n";
break;
case Op_logico:
resultado += " <Operador logico>\t" + lexer.lexeme + "\n";
break;
case Op_incremento:
resultado += " <Operador incremento>\t" + lexer.lexeme + "\n";
break;
case Op_relacional:
resultado += " <Operador relacional>\t" + lexer.lexeme + "\n";
break;
case Op_atribucion:
resultado += " <Operador atribucion>\t" + lexer.lexeme + "\n";
break;
case Op_booleano:
resultado += " <Operador booleano>\t" + lexer.lexeme + "\n";
break;
case Parentesis_a:
resultado += " <Parentesis de apertura>\t" + lexer.lexeme + "\n";
break;
case Parentesis_c:
resultado += " <Parentesis de cierre>\t" + lexer.lexeme + "\n";
break;
case Llave_a:
resultado += " <Llave de apertura>\t" + lexer.lexeme + "\n";
break;
case Llave_c:
resultado += " <Llave de cierre>\t" + lexer.lexeme + "\n";
break;
case Corchete_a:
resultado += " <Corchete de apertura>\t" + lexer.lexeme + "\n";
break;
case Corchete_c:
resultado += " <Corchete de cierre>\t" + lexer.lexeme + "\n";
break;
case Main:
resultado += " <Reservada main>\t" + lexer.lexeme + "\n";
break;
case P_coma:
resultado += " <Punto y coma>\t" + lexer.lexeme + "\n";
break;
case Identificador:
resultado += " <Identificador>\t\t" + lexer.lexeme + "\n";
break;
case Numero:
resultado += " <Numero>\t\t" + lexer.lexeme + "\n";
break;
case ERROR:
resultado += " <Simbolo no definido>\n";
break;
default:
resultado += " < " + lexer.lexeme + " >\n";
break;
}
}
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton analizar;
    private javax.swing.JButton archivo;
    private javax.swing.JTextField directorio;
    private javax.swing.JTextField expresion;
    private javax.swing.JButton guardar;
    private javax.swing.JTextArea imprimirdoc;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea salida;
    private javax.swing.JTextArea txtSintaxis;
    private javax.swing.JButton validar;
    // End of variables declaration//GEN-END:variables
}
